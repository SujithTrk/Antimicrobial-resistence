{"env_info": "sys.platform: linux\nPython: 3.9.13 (main, Aug 25 2022, 23:26:10) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 11.5, V11.5.119\nGCC: gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0\nPyTorch: 1.12.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu116\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.25.2+9d3e162", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=5,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True, color_type='color'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='PhotoMetricDistortion',\n        brightness_delta=32,\n        contrast_range=(0.5, 1.5),\n        saturation_range=(0.5, 1.5),\n        hue_delta=18),\n    dict(\n        type='RandomCenterCropPad',\n        crop_size=(512, 512),\n        ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n        mean=[0, 0, 0],\n        std=[1, 1, 1],\n        to_rgb=True,\n        test_pad_mode=None),\n    dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile', to_float32=True),\n    dict(\n        type='MultiScaleFlipAug',\n        scale_factor=1.0,\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(\n                type='RandomCenterCropPad',\n                ratios=None,\n                border=None,\n                mean=[0, 0, 0],\n                std=[1, 1, 1],\n                to_rgb=True,\n                test_mode=True,\n                test_pad_mode=['logical_or', 31],\n                test_pad_add_pix=1),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                meta_keys=('filename', 'ori_filename', 'ori_shape',\n                           'img_shape', 'pad_shape', 'scale_factor', 'flip',\n                           'flip_direction', 'img_norm_cfg', 'border'),\n                keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=16,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='./ann_coco/Train_bacteria_annotation_coco.json',\n        img_prefix='/home/badboy-002/github/senior_project/',\n        pipeline=[\n            dict(\n                type='LoadImageFromFile', to_float32=True, color_type='color'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='PhotoMetricDistortion',\n                brightness_delta=32,\n                contrast_range=(0.5, 1.5),\n                saturation_range=(0.5, 1.5),\n                hue_delta=18),\n            dict(\n                type='RandomCenterCropPad',\n                crop_size=(512, 512),\n                ratios=(0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3),\n                mean=[0, 0, 0],\n                std=[1, 1, 1],\n                to_rgb=True,\n                test_pad_mode=None),\n            dict(type='Resize', img_scale=(512, 512), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('Amp', 'Cip', 'Rif', 'Tet', 'unt')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./ann_coco/Test_bacteria_annotation_coco.json',\n        img_prefix='/home/badboy-002/github/senior_project/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomCenterCropPad',\n                        ratios=None,\n                        border=None,\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 31],\n                        test_pad_add_pix=1),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        meta_keys=('filename', 'ori_filename', 'ori_shape',\n                                   'img_shape', 'pad_shape', 'scale_factor',\n                                   'flip', 'flip_direction', 'img_norm_cfg',\n                                   'border'),\n                        keys=['img'])\n                ])\n        ],\n        classes=('Amp', 'Cip', 'Rif', 'Tet', 'unt')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./ann_coco/Test_bacteria_annotation_coco.json',\n        img_prefix='/home/badboy-002/github/senior_project/',\n        pipeline=[\n            dict(type='LoadImageFromFile', to_float32=True),\n            dict(\n                type='MultiScaleFlipAug',\n                scale_factor=1.0,\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(\n                        type='RandomCenterCropPad',\n                        ratios=None,\n                        border=None,\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True,\n                        test_mode=True,\n                        test_pad_mode=['logical_or', 31],\n                        test_pad_add_pix=1),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='DefaultFormatBundle'),\n                    dict(\n                        type='Collect',\n                        meta_keys=('filename', 'ori_filename', 'ori_shape',\n                                   'img_shape', 'pad_shape', 'scale_factor',\n                                   'flip', 'flip_direction', 'img_norm_cfg',\n                                   'border'),\n                        keys=['img'])\n                ])\n        ],\n        classes=('Amp', 'Cip', 'Rif', 'Tet', 'unt')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=2000,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=100)\ncheckpoint_config = dict(interval=50)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nimage_path = '/home/badboy-002/github/senior_project/'\ntrain_coco_path = './ann_coco/Train_bacteria_annotation_coco.json'\ntest_coco_path = './ann_coco/Test_bacteria_annotation_coco.json'\nCLASSES = ('Amp', 'Cip', 'Rif', 'Tet', 'unt')\nwork_dir = 'retinanet_r50_fpnx1_20-10-22'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 897264281, "exp_name": "bacteria_retinanet_r50_fpn_1x_coco.py"}
{"mode": "val", "epoch": 1, "iter": 5, "lr": 0.0}
{"mode": "val", "epoch": 2, "iter": 5, "lr": 0.0}
{"mode": "val", "epoch": 3, "iter": 5, "lr": 0.0}
{"mode": "val", "epoch": 4, "iter": 5, "lr": 0.0}
